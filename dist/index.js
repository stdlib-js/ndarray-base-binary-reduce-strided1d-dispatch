"use strict";var I=function(r,e){return function(){return e||r((e={exports:{}}).exports,e),e.exports}};var U=I(function(Ir,dr){dr.exports={dims:null,keepdims:!1}});var H=I(function(zr,G){"use strict";var mr=require("@stdlib/assert-is-plain-object"),B=require("@stdlib/assert-has-own-property"),vr=require("@stdlib/assert-is-boolean").isPrimitive,pr=require("@stdlib/assert-is-integer-array").primitives,hr=require("@stdlib/assert-is-empty-collection"),lr=require("@stdlib/ndarray-base-to-unique-normalized-indices"),L=require("@stdlib/array-base-join"),gr=require("@stdlib/array-base-assert-contains"),F=require("@stdlib/string-format");function fr(r,e,t,n){var u;if(!mr(n))return new TypeError(F("invalid argument. Options argument must be an object. Value: `%s`.",n));if(B(n,"keepdims")&&(r.keepdims=n.keepdims,!vr(r.keepdims)))return new TypeError(F("invalid option. `%s` option must be a boolean. Option: `%s`.","keepdims",r.keepdims));if(B(n,"dims")){if(r.dims=n.dims,!pr(r.dims)&&!hr(r.dims))return new TypeError(F("invalid option. `%s` option must be an array of integers. Option: `%s`.","dims",r.dims));if(u=lr(r.dims,e-1),u===null)return new RangeError(F("invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].","dims",L(r.dims,",")));if(u.length!==r.dims.length)return new Error(F("invalid option. `%s` option contains duplicate indices. Option: [%s].","dims",L(r.dims,",")));r.dims=u}return B(n,"dtype")&&(r.dtype=n.dtype,!gr(t,r.dtype))?new TypeError(F('invalid option. `%s` option must be one of the following: "%s". Option: `%s`.',"dtype",L(t,'", "'),r.dtype)):null}G.exports=fr});var K=I(function(Cr,J){"use strict";function yr(r,e,t,n,u,d,o,c,q){var w,v,p,s;for(w=d,p=0;p<r;p++){for(v=q,s=0;s<e&&t[w+s*u]===o[v];s++)v+=c;if(s===e)return p;w+=n}return-1}J.exports=yr});var or=I(function(Pr,ur){"use strict";var M=require("@stdlib/utils-define-nonenumerable-read-only-property"),Q=require("@stdlib/assert-has-property"),D=require("@stdlib/assert-is-ndarray-like"),W=require("@stdlib/assert-is-object"),cr=require("@stdlib/assert-is-function"),z=require("@stdlib/assert-is-collection"),X=require("@stdlib/assert-is-empty-collection"),wr=require("@stdlib/assert-is-function-array"),Y=require("@stdlib/ndarray-base-assert-is-data-type"),br=require("@stdlib/ndarray-base-assert-is-output-data-type-policy"),qr=require("@stdlib/ndarray-base-assert-is-input-casting-policy"),O=require("@stdlib/array-base-assert-contains"),rr=require("@stdlib/ndarray-base-binary-reduce-strided1d"),Er=require("@stdlib/ndarray-base-binary-output-dtype"),C=require("@stdlib/ndarray-base-binary-input-casting-dtype"),N=require("@stdlib/ndarray-base-dtypes2enums"),Tr=require("@stdlib/ndarray-base-spread-dimensions"),P=require("@stdlib/ndarray-shape"),_r=require("@stdlib/ndarray-ndims"),_=require("@stdlib/ndarray-base-dtype"),R=require("@stdlib/ndarray-base-order"),Z=require("@stdlib/ndarray-base-assign"),x=require("@stdlib/ndarray-base-empty"),jr=require("@stdlib/ndarray-empty"),kr=require("@stdlib/array-base-indices-complement"),Fr=require("@stdlib/array-base-take-indexed"),er=require("@stdlib/array-base-zero-to"),b=require("@stdlib/array-base-join"),Dr=require("@stdlib/array-base-copy"),ar=require("@stdlib/array-base-insert-at"),$=require("@stdlib/array-base-every-by"),tr=require("@stdlib/object-assign"),i=require("@stdlib/string-format"),Or=require("@stdlib/ndarray-defaults"),ir=U(),nr=H(),sr=K(),Vr=Or.get("order");function A(r,e,t,n){var u,d;if(!(this instanceof A))return new A(r,e,t,n);if(!W(r))throw new TypeError(i("invalid argument. First argument must be an object. Value: `%s`.",r));if(!cr(r.default))throw new TypeError(i('invalid argument. First argument must be an object having a "default" property and an associated method.'));if(Q(r,"types")&&!z(r.types)&&!X(r.types))throw new TypeError(i('invalid argument. First argument must be an object having a "types" property whose associated value is an array-like object.'));if(Q(r,"fcns")&&!wr(r.fcns)&&!X(r.fcns))throw new TypeError(i('invalid argument. First argument must be an object having a "fcns" property whose associated value is an array-like object containing functions.'));if(!z(e))throw new TypeError(i("invalid argument. Second argument must be an array-like object. Value: `%s`.",e));for(d=0;d<e.length;d++)if(u=e[d],!z(u)||u.length<1||!$(u,Y))throw new TypeError(i("invalid argument. Second argument must contain arrays of data types. Value: `%s`.",e));if(!z(t)||t.length<1||!$(t,Y))throw new TypeError(i("invalid argument. Third argument must be an array of data types. Value: `%s`.",t));if(!W(n))throw new TypeError(i("invalid argument. Fourth argument must be an object. Value: `%s`.",r));if(!br(n.output))throw new TypeError(i("invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.",n.output));if(!qr(n.casting))throw new TypeError(i("invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.",n.casting));if(this._table={default:r.default,types:r.types?N(r.types):[],fcns:r.fcns?Dr(r.fcns):[]},this._table.types.length!==2*this._table.fcns.length)throw new Error("invalid argument. First argument specifies an unexpected number of types. Two input ndarray data types must be specified for each provided strided function.");return this._idtypes=e,this._odtypes=t,this._policies={output:n.output,casting:n.casting},this}M(A.prototype,"apply",function(e,t){var n,u,d,o,c,q,w,v,p,s,h,j,y,m,l,f,E,a,T,k,V,g,S;if(u=arguments.length,!D(e))throw new TypeError(i("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",e));if(!D(t))throw new TypeError(i("invalid argument. Second argument must be an ndarray-like object. Value: `%s`.",t));if(l=_(e),!O(this._idtypes[0],l))throw new TypeError(i('invalid argument. First argument must have one of the following data types: "%s". Data type: `%s`.',b(this._idtypes[0],'", "'),l));if(f=_(t),!O(this._idtypes[1],f))throw new TypeError(i('invalid argument. Second argument must have one of the following data types: "%s". Data type: `%s`.',b(this._idtypes[1],'", "'),f));for(d=[e,t],g=2;g<u&&(y=arguments[g],!!D(y));g++){if(a=_(y),!O(this._idtypes[g],a))throw new TypeError(i('invalid argument. Argument %d must have one of the following data types: "%s". Data type: `%s`.',g,b(this._idtypes[g],'", "'),a));d.push(y)}if(g<u-1)throw new TypeError(i("invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.",g,arguments[g]));if(s=P(e),h=P(t),s.length!==h.length)throw new Error(i("invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.",s.length,h.length));for(k=s.length,S=0;S<k;S++)if(s[S]!==h[S])throw new Error(i("invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].",b(s,","),b(h,",")));if(o=tr({},ir),u>g&&(n=arguments[u-1],v=nr(o,k,this._odtypes,n),v))throw v;return o.dims===null&&(o.dims=er(k)),p=kr(k,o.dims),j=Fr(s,p),c=R(e),q=R(t),c===q?w=c:w=Vr,E=o.dtype||Er(l,f,this._policies.output),V=jr(j,{dtype:E,order:w}),a=C(l,f,E,this._policies.casting),l!==a&&(m=x(a,s,c),Z([e,m]),d[0]=m,l=a),a=C(f,l,E,this._policies.casting),f!==a&&(m=x(a,h,q),Z([t,m]),d[1]=m,f=a),g=sr(this._table.fcns.length,2,this._table.types,2,1,0,N([l,f]),1,0),g>=0?T=this._table.fcns[g]:T=this._table.default,rr(T,ar(d,2,V),o.dims),o.keepdims&&(V=Tr(k,V,p)),V});M(A.prototype,"assign",function r(e,t){var n,u,d,o,c,q,w,v,p,s,h,j,y,m,l,f,E,a,T;if(u=arguments.length,!D(e))throw new TypeError(i("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",e));if(!D(t))throw new TypeError(i("invalid argument. Second argument must be an ndarray-like object. Value: `%s`.",t));if(s=_(e),!O(this._idtypes[0],s))throw new TypeError(i('invalid argument. First argument must have one of the following data types: "%s". Data type: `%s`.',b(this._idtypes[0],'", "'),s));if(h=_(t),!O(this._idtypes[1],h))throw new TypeError(i('invalid argument. Second argument must have one of the following data types: "%s". Data type: `%s`.',b(this._idtypes[1],'", "'),h));if(v=P(e),p=P(t),v.length!==p.length)throw new Error(i("invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.",v.length,p.length));for(l=v.length,T=0;T<l;T++)if(v[T]!==p[T])throw new Error(i("invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].",b(v,","),b(p,",")));for(o=[e,t],a=2;a<u&&(c=arguments[a],!!D(c));a++)o.push(c);if(a<3)throw new TypeError(i("invalid argument. Third argument must be an ndarray-like object. Value: `%s`.",arguments[2]));if(a===u-1)n=arguments[a],w=!0;else if(a<u-1)throw new TypeError(i("invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.",a,arguments[a]));for(E=o.pop(),a=2;a<o.length;a++)if(m=_(o[a]),!O(this._idtypes[a],m))throw new TypeError(i('invalid argument. Argument %d must have one of the following data types: "%s". Data type: `%s`.',a,b(this._idtypes[a],'", "'),m));if(l=_r(e),d=tr({},ir),w&&(q=nr(d,l,this._odtypes,n),q))throw q;return d.dims===null&&(d.dims=er(l)),j=_(E),m=C(s,h,j,this._policies.casting),s!==m&&(y=x(m,v,R(e)),r([e,y]),o[0]=y,s=m),m=C(h,s,j,this._policies.casting),h!==m&&(y=x(m,p,R(t)),r([t,y]),o[1]=y,h=m),a=sr(this._table.fcns.length,2,this._table.types,2,1,0,N([s,h]),1,0),a>=0?f=this._table.fcns[a]:f=this._table.default,rr(f,ar(o,2,E),d.dims),E});ur.exports=A});var Sr=or();module.exports=Sr;
/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
