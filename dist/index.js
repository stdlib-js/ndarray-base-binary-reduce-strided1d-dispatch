"use strict";var B=function(r,a){return function(){return a||r((a={exports:{}}).exports,a),a.exports}};var x=B(function(Vr,ur){ur.exports={dims:null,keepdims:!1}});var H=B(function(Sr,G){"use strict";var or=require("@stdlib/assert-is-plain-object"),L=require("@stdlib/assert-has-own-property"),dr=require("@stdlib/assert-is-boolean").isPrimitive,mr=require("@stdlib/assert-is-integer-array").primitives,vr=require("@stdlib/assert-is-empty-collection"),pr=require("@stdlib/ndarray-base-to-unique-normalized-indices"),N=require("@stdlib/array-base-join"),hr=require("@stdlib/array-base-assert-contains"),F=require("@stdlib/string-format");function lr(r,a,i,n){var s;if(!or(n))return new TypeError(F("invalid argument. Options argument must be an object. Value: `%s`.",n));if(L(n,"keepdims")&&(r.keepdims=n.keepdims,!dr(r.keepdims)))return new TypeError(F("invalid option. `%s` option must be a boolean. Option: `%s`.","keepdims",r.keepdims));if(L(n,"dims")){if(r.dims=n.dims,!mr(r.dims)&&!vr(r.dims))return new TypeError(F("invalid option. `%s` option must be an array of integers. Option: `%s`.","dims",r.dims));if(s=pr(r.dims,a-1),s===null)return new RangeError(F("invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].","dims",N(r.dims,",")));if(s.length!==r.dims.length)return new Error(F("invalid option. `%s` option contains duplicate indices. Option: [%s].","dims",N(r.dims,",")));r.dims=s}return L(n,"dtype")&&(r.dtype=n.dtype,!hr(i,r.dtype))?new TypeError(F('invalid option. `%s` option must be one of the following: "%s". Option: `%s`.',"dtype",N(i,'", "'),r.dtype)):null}G.exports=lr});var sr=B(function(Ar,nr){"use strict";var Y=require("@stdlib/utils-define-nonenumerable-read-only-property"),J=require("@stdlib/assert-has-property"),D=require("@stdlib/assert-is-ndarray-like"),K=require("@stdlib/assert-is-object"),gr=require("@stdlib/assert-is-function"),I=require("@stdlib/assert-is-collection"),M=require("@stdlib/assert-is-empty-collection"),fr=require("@stdlib/assert-is-function-array"),Q=require("@stdlib/ndarray-base-assert-is-data-type"),yr=require("@stdlib/ndarray-base-assert-is-output-data-type-policy"),cr=require("@stdlib/ndarray-base-assert-is-input-casting-policy"),O=require("@stdlib/array-base-assert-contains"),Z=require("@stdlib/ndarray-base-binary-reduce-strided1d"),wr=require("@stdlib/ndarray-base-binary-output-dtype"),z=require("@stdlib/ndarray-base-binary-input-casting-dtype"),U=require("@stdlib/ndarray-base-dtypes2enums"),br=require("@stdlib/ndarray-base-spread-dimensions"),C=require("@stdlib/ndarray-shape"),qr=require("@stdlib/ndarray-ndims"),T=require("@stdlib/ndarray-base-dtype"),R=require("@stdlib/ndarray-base-order"),W=require("@stdlib/ndarray-base-assign"),P=require("@stdlib/ndarray-base-empty"),Er=require("@stdlib/ndarray-empty"),Tr=require("@stdlib/array-base-indices-complement"),_r=require("@stdlib/array-base-take-indexed"),$=require("@stdlib/array-base-zero-to"),c=require("@stdlib/array-base-join"),jr=require("@stdlib/array-base-copy"),rr=require("@stdlib/array-base-insert-at"),X=require("@stdlib/array-base-every-by"),er=require("@stdlib/blas-ext-base-gindex-of-row").ndarray,ar=require("@stdlib/object-assign"),t=require("@stdlib/string-format"),kr=require("@stdlib/ndarray-defaults"),tr=x(),ir=H(),Fr=kr.get("order");function A(r,a,i,n){var s,m;if(!(this instanceof A))return new A(r,a,i,n);if(!K(r))throw new TypeError(t("invalid argument. First argument must be an object. Value: `%s`.",r));if(!gr(r.default))throw new TypeError(t('invalid argument. First argument must be an object having a "default" property and an associated method.'));if(J(r,"types")&&!I(r.types)&&!M(r.types))throw new TypeError(t('invalid argument. First argument must be an object having a "types" property whose associated value is an array-like object.'));if(J(r,"fcns")&&!fr(r.fcns)&&!M(r.fcns))throw new TypeError(t('invalid argument. First argument must be an object having a "fcns" property whose associated value is an array-like object containing functions.'));if(!I(a))throw new TypeError(t("invalid argument. Second argument must be an array-like object. Value: `%s`.",a));for(m=0;m<a.length;m++)if(s=a[m],!I(s)||s.length<1||!X(s,Q))throw new TypeError(t("invalid argument. Second argument must contain arrays of data types. Value: `%s`.",a));if(!I(i)||i.length<1||!X(i,Q))throw new TypeError(t("invalid argument. Third argument must be an array of data types. Value: `%s`.",i));if(!K(n))throw new TypeError(t("invalid argument. Fourth argument must be an object. Value: `%s`.",r));if(!yr(n.output))throw new TypeError(t("invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.",n.output));if(!cr(n.casting))throw new TypeError(t("invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.",n.casting));if(this._table={default:r.default,types:r.types?U(r.types):[],fcns:r.fcns?jr(r.fcns):[]},this._table.types.length!==2*this._table.fcns.length)throw new Error("invalid argument. First argument specifies an unexpected number of types. Two input ndarray data types must be specified for each provided strided function.");return this._idtypes=a,this._odtypes=i,this._policies={output:n.output,casting:n.casting},this}Y(A.prototype,"apply",function(a,i){var n,s,m,o,q,E,_,g,y,d,v,j,f,u,p,l,w,e,b,k,V,h,S;if(s=arguments.length,!D(a))throw new TypeError(t("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",a));if(!D(i))throw new TypeError(t("invalid argument. Second argument must be an ndarray-like object. Value: `%s`.",i));if(p=T(a),!O(this._idtypes[0],p))throw new TypeError(t('invalid argument. First argument must have one of the following data types: "%s". Data type: `%s`.',c(this._idtypes[0],'", "'),p));if(l=T(i),!O(this._idtypes[1],l))throw new TypeError(t('invalid argument. Second argument must have one of the following data types: "%s". Data type: `%s`.',c(this._idtypes[1],'", "'),l));for(m=[a,i],h=2;h<s&&(f=arguments[h],!!D(f));h++){if(e=T(f),!O(this._idtypes[h],e))throw new TypeError(t('invalid argument. Argument %d must have one of the following data types: "%s". Data type: `%s`.',h,c(this._idtypes[h],'", "'),e));m.push(f)}if(h<s-1)throw new TypeError(t("invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.",h,arguments[h]));if(d=C(a),v=C(i),d.length!==v.length)throw new Error(t("invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.",d.length,v.length));for(k=d.length,S=0;S<k;S++)if(d[S]!==v[S])throw new Error(t("invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].",c(d,","),c(v,",")));if(o=ar({},tr),s>h&&(n=arguments[s-1],g=ir(o,k,this._odtypes,n),g))throw g;return o.dims===null&&(o.dims=$(k)),y=Tr(k,o.dims),j=_r(d,y),q=R(a),E=R(i),q===E?_=q:_=Fr,w=o.dtype||wr(p,l,this._policies.output),V=Er(j,{dtype:w,order:_}),e=z(p,l,w,this._policies.casting),p!==e&&(u=P(e,d,q),W([a,u]),m[0]=u,p=e),e=z(l,p,w,this._policies.casting),l!==e&&(u=P(e,v,E),W([i,u]),m[1]=u,l=e),h=er(this._table.fcns.length,2,this._table.types,2,1,0,U([p,l]),1,0),h>=0?b=this._table.fcns[h]:b=this._table.default,Z(b,rr(m,2,V),o.dims),o.keepdims&&(V=br(k,V,y)),V});Y(A.prototype,"assign",function r(a,i){var n,s,m,o,q,E,_,g,y,d,v,j,f,u,p,l,w,e,b;if(s=arguments.length,!D(a))throw new TypeError(t("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",a));if(!D(i))throw new TypeError(t("invalid argument. Second argument must be an ndarray-like object. Value: `%s`.",i));if(d=T(a),!O(this._idtypes[0],d))throw new TypeError(t('invalid argument. First argument must have one of the following data types: "%s". Data type: `%s`.',c(this._idtypes[0],'", "'),d));if(v=T(i),!O(this._idtypes[1],v))throw new TypeError(t('invalid argument. Second argument must have one of the following data types: "%s". Data type: `%s`.',c(this._idtypes[1],'", "'),v));if(g=C(a),y=C(i),g.length!==y.length)throw new Error(t("invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.",g.length,y.length));for(p=g.length,b=0;b<p;b++)if(g[b]!==y[b])throw new Error(t("invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].",c(g,","),c(y,",")));for(o=[a,i],e=2;e<s&&(q=arguments[e],!!D(q));e++)o.push(q);if(e<3)throw new TypeError(t("invalid argument. Third argument must be an ndarray-like object. Value: `%s`.",arguments[2]));if(e===s-1)n=arguments[e],_=!0;else if(e<s-1)throw new TypeError(t("invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.",e,arguments[e]));for(w=o.pop(),e=2;e<o.length;e++)if(u=T(o[e]),!O(this._idtypes[e],u))throw new TypeError(t('invalid argument. Argument %d must have one of the following data types: "%s". Data type: `%s`.',e,c(this._idtypes[e],'", "'),u));if(p=qr(a),m=ar({},tr),_&&(E=ir(m,p,this._odtypes,n),E))throw E;return m.dims===null&&(m.dims=$(p)),j=T(w),u=z(d,v,j,this._policies.casting),d!==u&&(f=P(u,g,R(a)),r([a,f]),o[0]=f,d=u),u=z(v,d,j,this._policies.casting),v!==u&&(f=P(u,y,R(i)),r([i,f]),o[1]=f,v=u),e=er(this._table.fcns.length,2,this._table.types,2,1,0,U([d,v]),1,0),e>=0?l=this._table.fcns[e]:l=this._table.default,Z(l,rr(o,2,w),m.dims),w});nr.exports=A});var Dr=sr();module.exports=Dr;
/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
