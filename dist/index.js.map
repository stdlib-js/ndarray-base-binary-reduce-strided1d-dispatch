{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"dims\": null,\n  \"keepdims\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar join = require( '@stdlib/array-base-join' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this, max-lines, id-length, no-warning-comments */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar hasProp = require( '@stdlib/assert-has-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar isFunctionArray = require( '@stdlib/assert-is-function-array' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar isInputCastingPolicy = require( '@stdlib/ndarray-base-assert-is-input-casting-policy' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar binaryReduceStrided1d = require( '@stdlib/ndarray-base-binary-reduce-strided1d' );\nvar binaryOutputDataType = require( '@stdlib/ndarray-base-binary-output-dtype' );\nvar binaryInputCastingDataType = require( '@stdlib/ndarray-base-binary-input-casting-dtype' );\nvar dtypes2enums = require( '@stdlib/ndarray-base-dtypes2enums' );\nvar spreadDimensions = require( '@stdlib/ndarray-base-spread-dimensions' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to input ndarrays originating in userland\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar baseEmpty = require( '@stdlib/ndarray-base-empty' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar join = require( '@stdlib/array-base-join' );\nvar copy = require( '@stdlib/array-base-copy' );\nvar insertAt = require( '@stdlib/array-base-insert-at' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar gindexOfRow = require( '@stdlib/blas-ext-base-gindex-of-row' ).ndarray;\nvar objectAssign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar DEFAULT_ORDER = defaults.get( 'order' );\n\n\n// MAIN //\n\n/**\n* Constructor for performing a reduction on two input ndarrays.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided reduction function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided reduction functions which are specific to specialized input ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each input ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {Error} first argument must be an object having valid properties\n* @returns {BinaryStrided1dDispatch} instance\n*\n* @example\n* var base = require( '@stdlib/blas-base-ndarray-gdot' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var z = dot.apply( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction BinaryStrided1dDispatch( table, idtypes, odtypes, policies ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof BinaryStrided1dDispatch ) ) {\n\t\treturn new BinaryStrided1dDispatch( table, idtypes, odtypes, policies );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', table ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? dtypes2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== 2 * this._table.fcns.length ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. Two input ndarray data types must be specified for each provided strided function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\treturn this;\n}\n\n/**\n* Performs a reduction on two provided input ndarrays.\n*\n* @name apply\n* @memberof BinaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - first input ndarray\n* @param {ndarrayLike} y - second input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var base = require( '@stdlib/blas-base-ndarray-gdot' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var z = dot.apply( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nsetReadOnly( BinaryStrided1dDispatch.prototype, 'apply', function apply( x, y ) {\n\tvar options;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar shz;\n\tvar arr;\n\tvar tmp;\n\tvar xdt;\n\tvar ydt;\n\tvar zdt;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar z;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\tydt = getDType( y );\n\tif ( !contains( this._idtypes[ 1 ], ydt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 1 ], '\", \"' ), ydt ) );\n\t}\n\targs = [ x, y ];\n\tfor ( i = 2; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\t// Note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function...\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Verify that both input arrays have the same shape:\n\tshx = getShape( x );\n\tshy = getShape( y );\n\tif ( shx.length !== shy.length ) {\n\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.', shx.length, shy.length ) );\n\t}\n\tN = shx.length;\n\tfor ( j = 0; j < N; j++ ) {\n\t\tif ( shx[ j ] !== shy[ j ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].', join( shx, ',' ), join( shy, ',' ) ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the input ndarrays across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshz = takeIndexed( shx, idx );\n\n\t// Resolve the output array order:\n\tordx = getOrder( x );\n\tordy = getOrder( y );\n\tif ( ordx === ordy ) {\n\t\tordz = ordx;\n\t} else {\n\t\t// When the orders differ, fall back to the default order:\n\t\tordz = DEFAULT_ORDER;\n\t}\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions:\n\tzdt = opts.dtype || binaryOutputDataType( xdt, ydt, this._policies.output );\n\tz = empty( shz, {\n\t\t'dtype': zdt,\n\t\t'order': ordz\n\t});\n\n\t// Determine whether we need to cast the input ndarrays...\n\tdt = binaryInputCastingDataType( xdt, ydt, zdt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, ordx );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\tdt = binaryInputCastingDataType( ydt, xdt, zdt, this._policies.casting );\n\tif ( ydt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shy, ordy );\n\t\tassign( [ y, tmp ] );\n\t\targs[ 1 ] = tmp;\n\t\tydt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data types:\n\ti = gindexOfRow( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes2enums( [ xdt, ydt ] ), 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tbinaryReduceStrided1d( f, insertAt( args, 2, z ), opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\tz = spreadDimensions( N, z, idx );\n\t}\n\treturn z;\n});\n\n/**\n* Performs a reduction on two provided input ndarrays and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof BinaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - first input ndarray\n* @param {ndarrayLike} y - second input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} second argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* var base = require( '@stdlib/blas-base-ndarray-gdot' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var zbuf = [ 0.0 ];\n* var z = new ndarray( 'generic', zbuf, [], [ 0 ], 0, 'row-major' );\n*\n* var out = dot.assign( x, y, z );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns -5.0\n*\n* var bool = ( out === z );\n* // returns true\n*/\nsetReadOnly( BinaryStrided1dDispatch.prototype, 'assign', function assign( x, y ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar shx;\n\tvar shy;\n\tvar xdt;\n\tvar ydt;\n\tvar zdt;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar z;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\t// Validate the input ndarray data types in order to maintain similar behavior to `apply` above...\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\tydt = getDType( y );\n\tif ( !contains( this._idtypes[ 1 ], ydt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 1 ], '\", \"' ), ydt ) );\n\t}\n\t// Verify that both input arrays have the same shape:\n\tshx = getShape( x );\n\tshy = getShape( y );\n\tif ( shx.length !== shy.length ) {\n\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.', shx.length, shy.length ) );\n\t}\n\tN = shx.length;\n\tfor ( j = 0; j < N; j++ ) {\n\t\tif ( shx[ j ] !== shy[ j ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].', join( shx, ',' ), join( shy, ',' ) ) );\n\t\t}\n\t}\n\targs = [ x, y ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 2; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 3 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray-like object. Value: `%s`.', arguments[ 2 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\tz = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support; note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function)...\n\tfor ( i = 2; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the input arrays across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Determine whether we need to cast the input ndarrays...\n\tzdt = getDType( z );\n\tdt = binaryInputCastingDataType( xdt, ydt, zdt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\tdt = binaryInputCastingDataType( ydt, xdt, zdt, this._policies.casting );\n\tif ( ydt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shy, getOrder( y ) );\n\t\tassign( [ y, tmp ] );\n\t\targs[ 1 ] = tmp;\n\t\tydt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\ti = gindexOfRow( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes2enums( [ xdt, ydt ] ), 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tbinaryReduceStrided1d( f, insertAt( args, 2, z ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn z;\n});\n\n\n// EXPORTS //\n\nmodule.exports = BinaryStrided1dDispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for performing a reduction on two input ndarrays.\n*\n* @module @stdlib/ndarray-base-binary-reduce-strided1d-dispatch\n*\n* @example\n* var base = require( '@stdlib/blas-base-ndarray-gdot' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n* var BinaryStrided1dDispatch = require( '@stdlib/ndarray-base-binary-reduce-strided1d-dispatch' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var z = dot.apply( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isIntegerArray", "isEmptyCollection", "normalizeIndices", "join", "contains", "format", "validate", "opts", "ndims", "dtypes", "options", "tmp", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "hasProp", "isndarrayLike", "isObject", "isFunction", "isCollection", "isEmptyCollection", "isFunctionArray", "isDataType", "isOutputDataTypePolicy", "isInputCastingPolicy", "contains", "binaryReduceStrided1d", "binaryOutputDataType", "binaryInputCastingDataType", "dtypes2enums", "spreadDimensions", "getShape", "ndims", "getDType", "getOrder", "assign", "baseEmpty", "empty", "indicesComplement", "takeIndexed", "zeroTo", "join", "copy", "insertAt", "everyBy", "gindexOfRow", "objectAssign", "format", "defaults", "DEFAULTS", "validate", "DEFAULT_ORDER", "BinaryStrided1dDispatch", "table", "idtypes", "odtypes", "policies", "dt", "i", "x", "y", "options", "nargs", "args", "opts", "ordx", "ordy", "ordz", "err", "idx", "shx", "shy", "shz", "arr", "tmp", "xdt", "ydt", "zdt", "f", "N", "z", "j", "flg", "main"]
}
