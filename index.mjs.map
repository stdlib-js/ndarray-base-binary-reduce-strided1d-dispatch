{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this, max-lines, id-length, no-warning-comments */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport hasProp from '@stdlib/assert-has-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isInputCastingPolicy from '@stdlib/ndarray-base-assert-is-input-casting-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport binaryReduceStrided1d from '@stdlib/ndarray-base-binary-reduce-strided1d';\nimport binaryOutputDataType from '@stdlib/ndarray-base-binary-output-dtype';\nimport binaryInputCastingDataType from '@stdlib/ndarray-base-binary-input-casting-dtype';\nimport dtypes2enums from '@stdlib/ndarray-base-dtypes2enums';\nimport spreadDimensions from '@stdlib/ndarray-base-spread-dimensions';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to input ndarrays originating in userland\nimport ndims from '@stdlib/ndarray-ndims';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport assign from '@stdlib/ndarray-base-assign';\nimport baseEmpty from '@stdlib/ndarray-base-empty';\nimport empty from '@stdlib/ndarray-empty';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport join from '@stdlib/array-base-join';\nimport copy from '@stdlib/array-base-copy';\nimport insertAt from '@stdlib/array-base-insert-at';\nimport everyBy from '@stdlib/array-base-every-by';\nimport { ndarray as gindexOfRow } from '@stdlib/blas-ext-base-gindex-of-row';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from '@stdlib/ndarray-defaults';\nimport DEFAULTS from './defaults.json';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar DEFAULT_ORDER = defaults.get( 'order' );\n\n\n// MAIN //\n\n/**\n* Constructor for performing a reduction on two input ndarrays.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided reduction function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided reduction functions which are specific to specialized input ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each input ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {Error} first argument must be an object having valid properties\n* @returns {BinaryStrided1dDispatch} instance\n*\n* @example\n* import base from '@stdlib/blas-base-ndarray-gdot';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var z = dot.apply( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction BinaryStrided1dDispatch( table, idtypes, odtypes, policies ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof BinaryStrided1dDispatch ) ) {\n\t\treturn new BinaryStrided1dDispatch( table, idtypes, odtypes, policies );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'null3L', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'null43', table ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? dtypes2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== 2 * this._table.fcns.length ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. Two input ndarray data types must be specified for each provided strided function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\treturn this;\n}\n\n/**\n* Performs a reduction on two provided input ndarrays.\n*\n* @name apply\n* @memberof BinaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - first input ndarray\n* @param {ndarrayLike} y - second input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import base from '@stdlib/blas-base-ndarray-gdot';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var z = dot.apply( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nsetReadOnly( BinaryStrided1dDispatch.prototype, 'apply', function apply( x, y ) {\n\tvar options;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar shz;\n\tvar arr;\n\tvar tmp;\n\tvar xdt;\n\tvar ydt;\n\tvar zdt;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar z;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\tydt = getDType( y );\n\tif ( !contains( this._idtypes[ 1 ], ydt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 1 ], '\", \"' ), ydt ) );\n\t}\n\targs = [ x, y ];\n\tfor ( i = 2; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\t// Note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function...\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Verify that both input arrays have the same shape:\n\tshx = getShape( x );\n\tshy = getShape( y );\n\tif ( shx.length !== shy.length ) {\n\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.', shx.length, shy.length ) );\n\t}\n\tN = shx.length;\n\tfor ( j = 0; j < N; j++ ) {\n\t\tif ( shx[ j ] !== shy[ j ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].', join( shx, ',' ), join( shy, ',' ) ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the input ndarrays across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshz = takeIndexed( shx, idx );\n\n\t// Resolve the output array order:\n\tordx = getOrder( x );\n\tordy = getOrder( y );\n\tif ( ordx === ordy ) {\n\t\tordz = ordx;\n\t} else {\n\t\t// When the orders differ, fall back to the default order:\n\t\tordz = DEFAULT_ORDER;\n\t}\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions:\n\tzdt = opts.dtype || binaryOutputDataType( xdt, ydt, this._policies.output );\n\tz = empty( shz, {\n\t\t'dtype': zdt,\n\t\t'order': ordz\n\t});\n\n\t// Determine whether we need to cast the input ndarrays...\n\tdt = binaryInputCastingDataType( xdt, ydt, zdt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, ordx );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\tdt = binaryInputCastingDataType( ydt, xdt, zdt, this._policies.casting );\n\tif ( ydt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shy, ordy );\n\t\tassign( [ y, tmp ] );\n\t\targs[ 1 ] = tmp;\n\t\tydt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data types:\n\ti = gindexOfRow( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes2enums( [ xdt, ydt ] ), 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tbinaryReduceStrided1d( f, insertAt( args, 2, z ), opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\tz = spreadDimensions( N, z, idx );\n\t}\n\treturn z;\n});\n\n/**\n* Performs a reduction on two provided input ndarrays and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof BinaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - first input ndarray\n* @param {ndarrayLike} y - second input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} second argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import base from '@stdlib/blas-base-ndarray-gdot';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'promoted',\n*     'casting': 'promoted'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var dot = new BinaryStrided1dDispatch( table, [ idt, idt ], odt, policies );\n*\n* var xbuf = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n* var y = new ndarray( 'generic', ybuf, [ ybuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var zbuf = [ 0.0 ];\n* var z = new ndarray( 'generic', zbuf, [], [ 0 ], 0, 'row-major' );\n*\n* var out = dot.assign( x, y, z );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns -5.0\n*\n* var bool = ( out === z );\n* // returns true\n*/\nsetReadOnly( BinaryStrided1dDispatch.prototype, 'assign', function assign( x, y ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar shx;\n\tvar shy;\n\tvar xdt;\n\tvar ydt;\n\tvar zdt;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar z;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\t// Validate the input ndarray data types in order to maintain similar behavior to `apply` above...\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\tydt = getDType( y );\n\tif ( !contains( this._idtypes[ 1 ], ydt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 1 ], '\", \"' ), ydt ) );\n\t}\n\t// Verify that both input arrays have the same shape:\n\tshx = getShape( x );\n\tshy = getShape( y );\n\tif ( shx.length !== shy.length ) {\n\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same number of dimensions. First array dimensions: %d. Second array dimensions: %d.', shx.length, shy.length ) );\n\t}\n\tN = shx.length;\n\tfor ( j = 0; j < N; j++ ) {\n\t\tif ( shx[ j ] !== shy[ j ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input arrays must have the same shape. First array shape: [%s]. Second array shape: [%s].', join( shx, ',' ), join( shy, ',' ) ) );\n\t\t}\n\t}\n\targs = [ x, y ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 2; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 3 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray-like object. Value: `%s`.', arguments[ 2 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\tz = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support; note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function)...\n\tfor ( i = 2; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the input arrays across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Determine whether we need to cast the input ndarrays...\n\tzdt = getDType( z );\n\tdt = binaryInputCastingDataType( xdt, ydt, zdt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\tdt = binaryInputCastingDataType( ydt, xdt, zdt, this._policies.casting );\n\tif ( ydt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shy, getOrder( y ) );\n\t\tassign( [ y, tmp ] );\n\t\targs[ 1 ] = tmp;\n\t\tydt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\ti = gindexOfRow( this._table.fcns.length, 2, this._table.types, 2, 1, 0, dtypes2enums( [ xdt, ydt ] ), 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tbinaryReduceStrided1d( f, insertAt( args, 2, z ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn z;\n});\n\n\n// EXPORTS //\n\nexport default BinaryStrided1dDispatch;\n"],"names":["validate","opts","ndims","dtypes","options","tmp","isObject","TypeError","format","hasOwnProp","keepdims","isBoolean","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","dtype","contains","DEFAULT_ORDER","defaults","get","BinaryStrided1dDispatch","table","idtypes","odtypes","policies","dt","i","this","isFunction","default","hasProp","isCollection","types","isFunctionArray","fcns","everyBy","isDataType","isOutputDataTypePolicy","output","isInputCastingPolicy","casting","_table","dtypes2enums","copy","_idtypes","_odtypes","_policies","setReadOnly","prototype","x","y","nargs","args","ordx","ordy","ordz","err","idx","shx","shy","shz","arr","xdt","ydt","zdt","f","N","z","j","arguments","isndarrayLike","getDType","push","getShape","objectAssign","DEFAULTS","zeroTo","indicesComplement","takeIndexed","getOrder","binaryOutputDataType","empty","order","binaryInputCastingDataType","baseEmpty","assign","gindexOfRow","binaryReduceStrided1d","insertAt","spreadDimensions","flg","pop"],"mappings":"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"}